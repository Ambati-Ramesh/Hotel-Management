CREATE TABLE Guest (
    guest_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    PRIMARY KEY (guest_id)
);

CREATE TABLE Room (
    room_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    room_number NUMBER UNIQUE NOT NULL,
    type VARCHAR2(50) NOT NULL,
    price NUMBER NOT NULL,
    is_available CHAR(1) DEFAULT 'Y',
    PRIMARY KEY (room_id)
);

CREATE TABLE Booking (
    booking_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    guest_id NUMBER NOT NULL,
    room_id NUMBER NOT NULL,
    check_in_date DATE NOT NULL,
    check_out_date DATE,
    PRIMARY KEY (booking_id),
    FOREIGN KEY (guest_id) REFERENCES Guest(guest_id),
    FOREIGN KEY (room_id) REFERENCES Room(room_id)
);

import java.sql.*;
import java.util.Scanner;

public class HotelManagementSystem {
    private static final String URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String USER = "scott";
    private static final String PASSWORD = "tiger";
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)) {
            while (true) {
                System.out.println("1. Add New Guest");
                System.out.println("2. Book a Room");
                System.out.println("3. Check Out");
                System.out.println("4. Exit");
                System.out.print("Choose an option: ");
                int option = scanner.nextInt();
                
                switch (option) {
                    case 1:
                        addNewGuest(connection, scanner);
                        break;
                    case 2:
                        bookRoom(connection, scanner);
                        break;
                    case 3:
                        checkOut(connection, scanner);
                        break;
                    case 4:
                        System.exit(0);
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private static void addNewGuest(Connection connection, Scanner scanner) throws SQLException {
        System.out.print("Enter guest name: ");
        String name = scanner.next();
        System.out.print("Enter guest email: ");
        String email = scanner.next();
        
        String sql = "INSERT INTO Guest (name, email) VALUES (?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, email);
            statement.executeUpdate();
            System.out.println("Guest added successfully.");
        }
    }
    
    private static void bookRoom(Connection connection, Scanner scanner) throws SQLException {
        System.out.print("Enter guest ID: ");
        int guestId = scanner.nextInt();
        System.out.print("Enter room ID: ");
        int roomId = scanner.nextInt();
        System.out.print("Enter check-in date (YYYY-MM-DD): ");
        String checkInDate = scanner.next();
        
        String sql = "INSERT INTO Booking (guest_id, room_id, check_in_date) VALUES (?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, guestId);
            statement.setInt(2, roomId);
            statement.setDate(3, Date.valueOf(checkInDate));
            statement.executeUpdate();
            
            sql = "UPDATE Room SET is_available = 'N' WHERE room_id = ?";
            try (PreparedStatement updateRoomStatement = connection.prepareStatement(sql)) {
                updateRoomStatement.setInt(1, roomId);
                updateRoomStatement.executeUpdate();
            }
            
            System.out.println("Room booked successfully.");
        }
    }
    
    private static void checkOut(Connection connection, Scanner scanner) throws SQLException {
        System.out.print("Enter booking ID: ");
        int bookingId = scanner.nextInt();
        System.out.print("Enter check-out date (YYYY-MM-DD): ");
        String checkOutDate = scanner.next();
        
        String sql = "UPDATE Booking SET check_out_date = ? WHERE booking_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setDate(1, Date.valueOf(checkOutDate));
            statement.setInt(2, bookingId);
            statement.executeUpdate();
            
            sql = "SELECT room_id FROM Booking WHERE booking_id = ?";
            int roomId;
            try (PreparedStatement selectRoomStatement = connection.prepareStatement(sql)) {
                selectRoomStatement.setInt(1, bookingId);
                try (ResultSet resultSet = selectRoomStatement.executeQuery()) {
                    if (resultSet.next()) {
                        roomId = resultSet.getInt("room_id");
                        
                        sql = "UPDATE Room SET is_available = 'Y' WHERE room_id = ?";
                        try (PreparedStatement updateRoomStatement = connection.prepareStatement(sql)) {
                            updateRoomStatement.setInt(1, roomId);
                            updateRoomStatement.executeUpdate();
                        }
                    }
                }
            }
            
            System.out.println("Checked out successfully.");
        }
    }
}
